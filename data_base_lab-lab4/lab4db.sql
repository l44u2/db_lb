-- MySQL Script generated by MySQL Workbench
-- Thu Nov 21 19:54:22 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema lab4
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `lab4` ;

-- -----------------------------------------------------
-- Schema lab4
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `lab4` DEFAULT CHARACTER SET utf8 ;
USE `lab4` ;

-- -----------------------------------------------------
-- Table `lab4`.`animator`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `lab4`.`animator` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `surname` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `lab4`.`speciality`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `lab4`.`speciality` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `speicality_type` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `lab4`.`agency`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `lab4`.`agency` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NULL,
  `speciality_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_agency_speicality1_idx` (`speciality_id` ASC) VISIBLE,
  CONSTRAINT `fk_agency_speicality1`
    FOREIGN KEY (`speciality_id`)
    REFERENCES `lab4`.`speciality` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `lab4`.`location`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `lab4`.`location` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `house` VARCHAR(45) NOT NULL,
  `street` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `lab4`.`type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `lab4`.`type` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `type` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `lab4`.`event`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `lab4`.`event` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `animator_id` INT NOT NULL,
  `agency_id` INT NOT NULL,
  `location_id` INT NOT NULL,
  `type_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_event_animator1_idx` (`animator_id` ASC) VISIBLE,
  INDEX `fk_event_agency1_idx` (`agency_id` ASC) VISIBLE,
  INDEX `fk_event_location1_idx` (`location_id` ASC) VISIBLE,
  INDEX `fk_event_type1_idx` (`type_id` ASC) VISIBLE,
  CONSTRAINT `fk_event_animator1`
    FOREIGN KEY (`animator_id`)
    REFERENCES `lab4`.`animator` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_event_agency1`
    FOREIGN KEY (`agency_id`)
    REFERENCES `lab4`.`agency` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_event_location1`
    FOREIGN KEY (`location_id`)
    REFERENCES `lab4`.`location` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_event_type1`
    FOREIGN KEY (`type_id`)
    REFERENCES `lab4`.`type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `lab4`.`wedding`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `lab4`.`wedding` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `event_date` DATE NOT NULL,
  `duration` TIME NOT NULL,
  `value` DECIMAL NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `lab4`.`event_wedding`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `lab4`.`event_wedding` (
  `event_id` INT NOT NULL,
  `wedding_id` INT NOT NULL,
  PRIMARY KEY (`event_id`, `wedding_id`),
  INDEX `fk_event_wedding_wedding1_idx` (`wedding_id` ASC) VISIBLE,
  CONSTRAINT `fk_event_wedding_event1`
    FOREIGN KEY (`event_id`)
    REFERENCES `lab4`.`event` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_event_wedding_wedding1`
    FOREIGN KEY (`wedding_id`)
    REFERENCES `lab4`.`wedding` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `lab4`.`birthday`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `lab4`.`birthday` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `event_date` DATE NOT NULL,
  `duration` TIME NOT NULL,
  `value` DECIMAL NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `lab4`.`kidparty`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `lab4`.`kidparty` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `event_date` DATE NOT NULL,
  `duration` TIME NOT NULL,
  `value` DECIMAL NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `lab4`.`firstsep`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `lab4`.`firstsep` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `event_date` DATE NOT NULL,
  `duration` TIME NOT NULL,
  `value` DECIMAL NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `lab4`.`christmass`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `lab4`.`christmass` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `event_date` DATE NOT NULL,
  `duration` TIME NOT NULL,
  `value` DECIMAL NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `lab4`.`newyear`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `lab4`.`newyear` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `event_date` DATE NOT NULL,
  `duration` TIME NOT NULL,
  `value` DECIMAL NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `lab4`.`event_birthday`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `lab4`.`event_birthday` (
  `event_id` INT NOT NULL,
  `birthday_id` INT NOT NULL,
  PRIMARY KEY (`event_id`, `birthday_id`),
  INDEX `fk_event_birthday_birthday1_idx` (`birthday_id` ASC) VISIBLE,
  CONSTRAINT `fk_event_birthday_birthday1`
    FOREIGN KEY (`birthday_id`)
    REFERENCES `lab4`.`birthday` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_event_birthday_event1`
    FOREIGN KEY (`event_id`)
    REFERENCES `lab4`.`event` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `lab4`.`event_kidparty`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `lab4`.`event_kidparty` (
  `event_id` INT NOT NULL,
  `kidparty_id` INT NOT NULL,
  PRIMARY KEY (`event_id`, `kidparty_id`),
  INDEX `fk_event_kidparty_kidparty1_idx` (`kidparty_id` ASC) VISIBLE,
  CONSTRAINT `fk_event_kidparty_kidparty1`
    FOREIGN KEY (`kidparty_id`)
    REFERENCES `lab4`.`kidparty` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_event_kidparty_event1`
    FOREIGN KEY (`event_id`)
    REFERENCES `lab4`.`event` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `lab4`.`event_firstsep`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `lab4`.`event_firstsep` (
  `event_id` INT NOT NULL,
  `firstsep_id` INT NOT NULL,
  PRIMARY KEY (`event_id`, `firstsep_id`),
  INDEX `fk_event_firstsep_firstsep1_idx` (`firstsep_id` ASC) VISIBLE,
  CONSTRAINT `fk_event_firstsep_firstsep1`
    FOREIGN KEY (`firstsep_id`)
    REFERENCES `lab4`.`firstsep` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_event_firstsep_event1`
    FOREIGN KEY (`event_id`)
    REFERENCES `lab4`.`event` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `lab4`.`event_christmass`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `lab4`.`event_christmass` (
  `event_id` INT NOT NULL,
  `christmass_id` INT NOT NULL,
  PRIMARY KEY (`event_id`, `christmass_id`),
  INDEX `fk_event_christmass_christmass1_idx` (`christmass_id` ASC) VISIBLE,
  CONSTRAINT `fk_event_christmass_christmass1`
    FOREIGN KEY (`christmass_id`)
    REFERENCES `lab4`.`christmass` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_event_christmass_event1`
    FOREIGN KEY (`event_id`)
    REFERENCES `lab4`.`event` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `lab4`.`event_newyear`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `lab4`.`event_newyear` (
  `event_id` INT NOT NULL,
  `newyear_id` INT NOT NULL,
  PRIMARY KEY (`event_id`, `newyear_id`),
  INDEX `fk_event_newyear_newyear1_idx` (`newyear_id` ASC) VISIBLE,
  CONSTRAINT `fk_event_newyear_newyear1`
    FOREIGN KEY (`newyear_id`)
    REFERENCES `lab4`.`newyear` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_event_newyear_event1`
    FOREIGN KEY (`event_id`)
    REFERENCES `lab4`.`event` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- Get events by animator ID
DROP PROCEDURE IF EXISTS get_events_after_animator;
DELIMITER //
CREATE PROCEDURE get_events_after_animator(IN animator_id INT)
BEGIN
    SELECT e.id AS event_id, t.type AS event_type, l.street, l.house
    FROM `event` e
    JOIN `type` t ON e.type_id = t.id
    JOIN `location` l ON e.location_id = l.id
    WHERE e.animator_id = animator_id;
END //
DELIMITER ;

-- Get animator by event ID
DROP PROCEDURE IF EXISTS get_animator_after_event;
DELIMITER //
CREATE PROCEDURE get_animator_after_event(IN event_id INT)
BEGIN
    SELECT a.id AS animator_id, a.name, a.surname
    FROM `animator` a
    JOIN `event` e ON a.id = e.animator_id
    WHERE e.id = event_id;
END //
DELIMITER ;

-- Get events by agency ID
DROP PROCEDURE IF EXISTS get_events_after_agency;
DELIMITER //
CREATE PROCEDURE get_events_after_agency(IN agency_id INT)
BEGIN
    SELECT e.id AS event_id, t.type AS event_type, l.street, l.house
    FROM `event` e
    JOIN `type` t ON e.type_id = t.id
    JOIN `location` l ON e.location_id = l.id
    WHERE e.agency_id = agency_id;
END //
DELIMITER ;

-- Get agency by event ID
DROP PROCEDURE IF EXISTS get_agency_after_event;
DELIMITER //
CREATE PROCEDURE get_agency_after_event(IN event_id INT)
BEGIN
    SELECT ag.id AS agency_id, ag.name, s.speciality_type
    FROM `agency` ag
    JOIN `speciality` s ON ag.speciality_id = s.id
    JOIN `event` e ON ag.id = e.agency_id
    WHERE e.id = event_id;
END //
DELIMITER ;

-- Get events by type ID
DROP PROCEDURE IF EXISTS get_events_after_type;
DELIMITER //
CREATE PROCEDURE get_events_after_type(IN type_id INT)
BEGIN
    SELECT e.id AS event_id, a.name AS animator_name, a.surname AS animator_surname, l.street, l.house
    FROM `event` e
    JOIN `animator` a ON e.animator_id = a.id
    JOIN `location` l ON e.location_id = l.id
    WHERE e.type_id = type_id;
END //
DELIMITER ;

-- Get type by event ID
DROP PROCEDURE IF EXISTS get_type_after_event;
DELIMITER //
CREATE PROCEDURE get_type_after_event(IN event_id INT)
BEGIN
    SELECT t.id AS type_id, t.type AS event_type
    FROM `type` t
    JOIN `event` e ON t.id = e.type_id
    WHERE e.id = event_id;
END //
DELIMITER ;

-- Get events by location ID
DROP PROCEDURE IF EXISTS get_events_after_location;
DELIMITER //
CREATE PROCEDURE get_events_after_location(IN location_id INT)
BEGIN
    SELECT e.id AS event_id, t.type AS event_type, a.name AS animator_name, a.surname AS animator_surname
    FROM `event` e
    JOIN `type` t ON e.type_id = t.id
    JOIN `animator` a ON e.animator_id = a.id
    WHERE e.location_id = location_id;
END //
DELIMITER ;

-- Get location by event ID
DROP PROCEDURE IF EXISTS get_location_after_event;
DELIMITER //
CREATE PROCEDURE get_location_after_event(IN event_id INT)
BEGIN
    SELECT l.id AS location_id, l.street, l.house
    FROM `location` l
    JOIN `event` e ON l.id = e.location_id
    WHERE e.id = event_id;
END //
DELIMITER ;

-- Get agencies by speciality ID
DROP PROCEDURE IF EXISTS get_agencies_after_speciality;
DELIMITER //
CREATE PROCEDURE get_agencies_after_speciality(IN speciality_id INT)
BEGIN
    SELECT ag.id AS agency_id, ag.name
    FROM `agency` ag
    WHERE ag.speciality_id = speciality_id;
END //
DELIMITER ;

-- Get speciality by agency ID
DROP PROCEDURE IF EXISTS get_speciality_after_agency;
DELIMITER //
CREATE PROCEDURE get_speciality_after_agency(IN agency_id INT)
BEGIN
    SELECT s.id AS speciality_id, s.speciality_type
    FROM `speciality` s
    JOIN `agency` ag ON s.id = ag.speciality_id
    WHERE ag.id = agency_id;
END //
DELIMITER ;

-- Get events for a specific date range
DROP PROCEDURE IF EXISTS get_events_by_date_range;
DELIMITER //
CREATE PROCEDURE get_events_by_date_range(IN start_date DATE, IN end_date DATE)
BEGIN
    SELECT e.id AS event_id, t.type AS event_type, e.animator_id, e.agency_id, l.street, l.house
    FROM `event` e
    JOIN `type` t ON e.type_id = t.id
    JOIN `location` l ON e.location_id = l.id
    WHERE e.id IN (
        SELECT event_id FROM `event_wedding` WHERE event_date BETWEEN start_date AND end_date
        UNION
        SELECT event_id FROM `event_birthday` WHERE event_date BETWEEN start_date AND end_date
        UNION
        SELECT event_id FROM `event_kidparty` WHERE event_date BETWEEN start_date AND end_date
        UNION
        SELECT event_id FROM `event_firstsep` WHERE event_date BETWEEN start_date AND end_date
        UNION
        SELECT event_id FROM `event_christmass` WHERE event_date BETWEEN start_date AND end_date
        UNION
        SELECT event_id FROM `event_newyear` WHERE event_date BETWEEN start_date AND end_date
    );
END //
DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
